type: edu
files:
- name: src/resources/application.conf
  visible: true
  text: |-
    ktor {
        deployment {
            port = 28888
        }
        application {
            modules = [hotkitchen.ApplicationKt.module]
        }
    }
  learner_created: false
- name: src/Application.kt
  visible: true
  text: |-
    package hotkitchen

    import io.ktor.application.*

    fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)

    fun Application.module(testing: Boolean = false) {}
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-serialization:1.6.21"
        }
    }
    def ktor_version = "1.6.7"

    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'kotlin'
    apply plugin: 'kotlinx-serialization'

    repositories {
        mavenCentral()
    }


    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib"
        implementation "io.ktor:ktor-server-core:$ktor_version"
        implementation "io.ktor:ktor-server-netty:$ktor_version"
        implementation("ch.qos.logback:logback-classic:1.2.10")

        implementation "io.ktor:ktor-auth:$ktor_version"
        implementation "io.ktor:ktor-auth-jwt:$ktor_version"

        implementation "io.ktor:ktor-serialization:$ktor_version"
        implementation('org.jetbrains.exposed:exposed-core:0.37.3')
        implementation('org.jetbrains.exposed:exposed-dao:0.37.3')
        implementation('org.jetbrains.exposed:exposed-jdbc:0.37.3')
        implementation('com.zaxxer:HikariCP:5.0.1')
        implementation("org.postgresql:postgresql:42.3.2")
    }
  learner_created: false
- name: test/HotKitchenTest.kt
  visible: false
  text: |-
    import com.typesafe.config.ConfigFactory
    import io.ktor.config.*
    import io.ktor.http.*
    import io.ktor.server.testing.*
    import kotlinx.serialization.Serializable
    import kotlinx.serialization.decodeFromString
    import kotlinx.serialization.encodeToString
    import kotlinx.serialization.json.Json
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult

    class HotKitchenTest : StageTest<Any>() {

        @Serializable
        private data class Credentials(var email: String, var userType: String, var password: String)

        @Serializable
        private data class SignUpCredentials(var email: String, var password: String)

        @Serializable
        private data class Token(val token: String)

        private object Messages {
            const val invalidEmail = """{"status":"Invalid email"}"""
            const val invalidPassword = """{"status":"Invalid password"}"""
            const val userAlreadyExists = """{"status":"User already exists"}"""
            const val invalidEmailPassword = """{"status":"Invalid email or password"}"""
        }

        private val time = System.currentTimeMillis().toString()
        private val wrongEmails =
            arrayOf(
                "@example.com",
                time,
                "$time@gmail",
                "$time@mail@com",
                "$time.gmail",
                "$time.mail.ru",
                "$time@yandex.ru@why",
                "$time@yandex@ru.why",
                "@which$time@gmail.com",
                "$time@gmail",
                "$time#lala@mail.us",
                "Goose Smith <$time@example.com>",
                "$time@example.com (Duck Smith)"
            )
        private val wrongPasswords =
            arrayOf(
                "",
                "ad12",
                "ad124",
                "password",
                "0123456",
                "paaaaaaaaaaaasssssword",
                "11113123123123123"
            )
        private val jwtRegex = """^[a-zA-Z0-9]+?\.[a-zA-Z0-9]+?\..+""".toRegex()
        private val currentCredentials = Credentials("$time@mail.com", "client", "password$time")
        private lateinit var signInToken: String
        private lateinit var signUpToken: String


        @DynamicTest(order = 1)
        fun checkWrongEmail(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            for (email in wrongEmails) {
                with(handleRequest(HttpMethod.Post, "/signup") {
                    setBody(Json.encodeToString(Credentials(email, "client", "password123")))
                    addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                }) {
                    if (response.content != Messages.invalidEmail || response.status() != HttpStatusCode.Forbidden)
                        return@withApplication CheckResult.wrong("Invalid email is not handled correctly.\nWrong response message or status code.\n$email is invalid email")
                }
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 2)
        fun checkWrongPassword(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            for (password in wrongPasswords) {
                with(handleRequest(HttpMethod.Post, "/signup") {
                    setBody(Json.encodeToString(Credentials(currentCredentials.email, "client", password)))
                    addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                }) {
                    if (response.content != Messages.invalidPassword || response.status() != HttpStatusCode.Forbidden)
                        return@withApplication CheckResult.wrong("Invalid password is not handled correctly.\nWrong response message or status code.\n$password is invalid password")
                }
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 3)
        fun getSignInJWTToken(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Post, "/signup") {
                setBody(Json.encodeToString(currentCredentials))
                addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
            }) {
                try {
                    val principal = Json.decodeFromString<Token>(response.content ?: "")
                    signInToken = principal.token
                    if (!signInToken.matches(jwtRegex) || signInToken.contains(currentCredentials.email))
                        return@withApplication CheckResult.wrong("Invalid JWT token")
                } catch (e: Exception) {
                    return@withApplication CheckResult.wrong("Cannot get token form /signin request")
                }
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 4)
        fun registerExistingUser(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Post, "/signup") {
                setBody(Json.encodeToString(currentCredentials))
                addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
            }) {
                if (response.content != Messages.userAlreadyExists || response.status() != HttpStatusCode.Forbidden)
                    return@withApplication CheckResult.wrong("An existing user is registered. Wrong response message or status code.")
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 5)
        fun wrongAuthorization(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Post, "/signin") {
                setBody(Json.encodeToString(SignUpCredentials("why?does?this?email?exists", currentCredentials.password)))
                addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
            }) {
                if (response.content != Messages.invalidEmailPassword || response.status() != HttpStatusCode.Forbidden)
                    return@withApplication CheckResult.wrong("Error when authorizing a user using a wrong email. Wrong response message or status code.")
            }
            with(handleRequest(HttpMethod.Post, "/signin") {
                setBody(Json.encodeToString(SignUpCredentials(currentCredentials.email, "completelyWrong123")))
                addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
            }) {
                if (response.content != Messages.invalidEmailPassword || response.status() != HttpStatusCode.Forbidden)
                    return@withApplication CheckResult.wrong("Error when authorizing a user using a wrong password. Wrong response message or status code.")
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 6)
        fun getSignUpJWTToken(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Post, "/signin") {
                setBody(Json.encodeToString(SignUpCredentials(currentCredentials.email, currentCredentials.password)))
                addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
            }) {
                try {
                    val principal = Json.decodeFromString<Token>(response.content ?: "")
                    signUpToken = principal.token
                    if (!signUpToken.matches(jwtRegex) || signUpToken.contains(currentCredentials.email))
                        return@withApplication CheckResult.wrong("Invalid JWT token")
                } catch (e: Exception) {
                    return@withApplication CheckResult.wrong("Cannot get token form /signup request")
                }
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 7)
        fun wrongValidation(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Get, "/validate") {
                addHeader(
                    HttpHeaders.Authorization,
                    "Bearer lala${(100..999).random()}.blo${(100..999).random()}blo.kek${(100..999).random()}"
                )
            }) {
                if (response.status() != HttpStatusCode.Unauthorized)
                    return@withApplication CheckResult.wrong("Wrong status code when authorizing with a completely wrong token using /validate")
            }
            with(handleRequest(HttpMethod.Get, "/validate") {
                addHeader(HttpHeaders.Authorization, signInToken)
            }) {
                if (response.status() != HttpStatusCode.Unauthorized)
                    return@withApplication CheckResult.wrong("Wrong status code when authorizing with a JWT token using /validate. Do you use \"Bearer\" in header?")
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 8)
        fun correctValidation(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Get, "/validate") {
                addHeader(HttpHeaders.Authorization, "Bearer $signInToken")
            }) {
                if (response.status() != HttpStatusCode.OK || response.content != "Hello, ${currentCredentials.userType} ${currentCredentials.email}")
                    return@withApplication CheckResult.wrong("Token validation with signin token failed.\nStatus code should be \"200 OK\"\nMessage should be \"Hello, ${currentCredentials.userType} ${currentCredentials.email}\"")
            }
            with(handleRequest(HttpMethod.Get, "/validate") {
                addHeader(HttpHeaders.Authorization, "Bearer $signUpToken")
            }) {
                if (response.status() != HttpStatusCode.OK || response.content != "Hello, ${currentCredentials.userType} ${currentCredentials.email}")
                    return@withApplication CheckResult.wrong("Token validation with signup token failed.\nStatus code should be \"200 OK\"\nMessage should be \"Hello, ${currentCredentials.userType} ${currentCredentials.email}\"")
            }
            return@withApplication CheckResult.correct()
        }
    }
  learner_created: false
- name: src/database/UserTable.kt
  visible: true
  text: |-
    package hotkitchen.database

    import org.jetbrains.exposed.dao.id.IntIdTable
    import org.jetbrains.exposed.sql.Column

    object UserTable : IntIdTable() {
        val email: Column<String> = text("email")
        val userType: Column<String> = text("userType")
        val password: Column<String> = text("password")
    }
  learner_created: true
- name: src/data/ResponseStatus.kt
  visible: true
  text: |-
    package hotkitchen.data

    import kotlinx.serialization.Serializable

    @Serializable
    data class ResponseStatus (
        val status: String
    )
  learner_created: true
- name: src/database/DatabaseFactory.kt
  visible: true
  text: |-
    package hotkitchen.database

    import com.typesafe.config.ConfigFactory
    import com.zaxxer.hikari.HikariConfig
    import com.zaxxer.hikari.HikariDataSource
    import io.ktor.application.*
    import io.ktor.config.*
    import org.jetbrains.exposed.sql.Database
    import org.jetbrains.exposed.sql.SchemaUtils
    import org.jetbrains.exposed.sql.StdOutSqlLogger
    import org.jetbrains.exposed.sql.addLogger
    import org.jetbrains.exposed.sql.transactions.transaction

    object DatabaseFactory {

        private val appConfig = HoconApplicationConfig(ConfigFactory.load())
        private val driverClassName = appConfig.property("storage.driverClassName").getString()
        private val dbUrl = appConfig.property("storage.jdbcURL").getString()
        private val dbUser = appConfig.property("storage.username").getString()
        private val dbUserPassword = appConfig.property("storage.password").getString()

        fun init() {
            Database.connect(hikari())
        }

        private fun hikari(): HikariDataSource {
            val config = HikariConfig()
            config.driverClassName = driverClassName
            config.username = dbUser
            config.jdbcUrl = dbUrl
            config.password = dbUserPassword
            config.maximumPoolSize = 3
            config.isAutoCommit = false
            config.transactionIsolation = "TRANSACTION_REPEATABLE_READ"
            config.validate()
            return HikariDataSource(config)
        }
    }

    fun Application.configureDatabase() {
        DatabaseFactory.init()
        transaction {
           SchemaUtils.create(UserTable)
        }
        transaction {
            addLogger(StdOutSqlLogger)
        }
    }
  learner_created: true
- name: src/data/User.kt
  visible: true
  text: |
    package hotkitchen.data

    import kotlinx.serialization.Serializable

    @Serializable
    data class User(
        val email: String,
        val userType: String,
        val password: String
    )
  learner_created: true
- name: src/data/SignIn.kt
  visible: true
  text: |
    package hotkitchen.data

    import kotlinx.serialization.Serializable

    @Serializable
    data class SignIn(
        val email: String,
        val password: String
    )
  learner_created: true
- name: src/database/DatabaseController.kt
  visible: true
  text: |-
    package hotkitchen.database

    import hotkitchen.data.User
    import org.jetbrains.exposed.sql.insert
    import org.jetbrains.exposed.sql.select
    import org.jetbrains.exposed.sql.transactions.transaction

    object DatabaseController {

        suspend fun getUserByEmail(email: String) = transaction {
            val query = UserTable.select { UserTable.email eq email }
            query.mapNotNull {
                User(
                    email = it[UserTable.email],
                    password = it[UserTable.password],
                    userType = it[UserTable.userType]
                )
            }.singleOrNull()
        }

        suspend fun saveUser(user: User) = transaction {
            UserTable.insert {
                it[email] = user.email
                it[password] = user.password
                it[userType] = user.userType
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/22604#comment
status: Unchecked
record: 2
